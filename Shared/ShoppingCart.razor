@* @inject ShoppingCartService ShoppingCartService *@
@inject NavigationManager NavigationManager

<!-- Notification Area to show the user when an update has been made to the cart -->
@* <div class="alert alert-info" role="alert" @if (!ShowNotification) { @style="display:none;" }>
    @NotificationMessage
</div> *@

<h2>Shopping Cart</h2>
@* <!-- Table to display the items in the shopping cart -->
<table class="table table-striped">
    <thead>
        <tr>
            <th>Image</th>
            <th>Product</th>
            <th>Quantity</th>
            <th>Price</th>
            <th>Subtotal</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in ShoppingCartService.GetCartItems())
        {
   
           <tr>
                <td><img src="@item.Product.ImageUrl" class="img-thumbnail" width="50" /></td>
                <td><a href="@item.Product.DetailsUrl">@item.Product.Name</a></td>
                <td>@item.Product.Name</td>
                <td>@item.Product.Price.ToString("C")</td>
                <td>
                    <input type="number" value="@item.Quantity" @oninput="e => UpdateQuantity(item.Product, Convert.ToInt32(e.Value))" min="1" class="form-control" />

                    <div class="btn-group">
                        <button class="btn btn-secondary" @onclick="(() => DecrementQuantity(item))">-</button>
                        <span>@item.Quantity</span>
                        <button class="btn btn-secondary" @onclick="(() => IncrementQuantity(item))">+</button>
                    </div>
                </td>
                <td>@(item.Product.Price * item.Quantity).ToString("C")</td>
                <td>
                    <button @onclick="() => RemoveItem(item.Product)" class="btn btn-danger">Remove</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<h4>Total: @ShoppingCartService.GetTotalPrice().ToString("C")</h4>
<button @onclick="Checkout" class="btn btn-primary">Checkout</button>

@code { *@
    // Flag to control the display of the notification
    private bool ShowNotification = false;

    // Message to be displayed in the notification
    private string NotificationMessage = "";

        // Load the cart from local storage when the component is initialized.
    protected override async Task OnInitializedAsync()
    {
        // Subscribe to the ShoppingCartService's OnCartChanged event to detect changes in the cart
        ShoppingCartService.OnCartChanged += CartChanged;
        
        await ShoppingCartService.LoadCartAsync();
        //return base.OnInitializedAsync();
    }

    private void IncrementQuantity(CartItem item)
    {
        ShoppingCartService.UpdateItemQuantity(item.Product, item.Quantity + 1);
    }

    private void DecrementQuantity(CartItem item)
    {
        if (item.Quantity > 1)
        {
            ShoppingCartService.UpdateItemQuantity(item.Product, item.Quantity - 1);
        }
    }

    private async Task UpdateQuantity(Product product, int quantity)
    {
        ShoppingCartService.UpdateItemQuantity(product, quantity);
        await ShoppingCartService.SaveCartAsync();
    }

    private async Task RemoveItem(Product product)
    {
        ShoppingCartService.RemoveItemFromCart(product);
        await ShoppingCartService.SaveCartAsync();
    }

    private void Checkout()
    {
        // Redirect to the checkout process or perform checkout actions here.
        NavigationManager.NavigateTo("/checkout");
    }

    // This method is triggered when the shopping cart changes (items added, removed, or updated)
    private void CartChanged()
    {
        // Set the flag to display the notification
        ShowNotification = true;

        // Update the notification message
        NotificationMessage = "Your cart has been updated!";

        // Trigger the UI to update and show the notification
        StateHasChanged();

        // Schedule a task to hide the notification after 3 seconds
        _ = Task.Delay(3000).ContinueWith(_ =>
        {
            // Reset the flag to hide the notification
            ShowNotification = false;

            // Trigger the UI to update and hide the notification
            StateHasChanged();
        });
    }

    // Unsubscribe from the event when the component is disposed to prevent memory leaks
    public void Dispose()
    {
        ShoppingCartService.OnCartChanged -= CartChanged;
    }
}
